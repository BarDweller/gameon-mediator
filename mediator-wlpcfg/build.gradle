apply plugin: 'eclipse'

buildscript {
	repositories {
	    mavenCentral()
	}

	dependencies {
		classpath 'com.bmuschko:gradle-docker-plugin:2.6'
	}
}

def dockerHost = "https://localhost:2376"
if (null != System.getenv("DOCKER_HOST"))
{
	dockerHost = System.getenv('DOCKER_HOST')

	if (dockerHost.indexOf('tcp') == 0)
	{
		dockerHost = dockerHost.replace('tcp','https')
	}
}

def determinedEnvironment = ["LICENSE=accept",
			"CONCIERGE_URL=" + System.getenv('CONCIERGE_URL'),
			"CONCIERGE_KEY=" + System.getenv('CONCIERGE_KEY'),
			"PLAYER_URL=" + System.getenv('PLAYER_URL')
		]
if (null != System.getenv("LOGSTASH_ENDPOINT"))
{
	determinedEnvironment << "LOGSTASH_ENDPOINT=" + System.getenv("LOGSTASH_ENDPOINT")
	determinedEnvironment << "LOGSTASH_KEY=" + System.getenv("LOGSTASH_KEY")
	determinedEnvironment << "LOGSTASH_CERT=" + System.getenv("LOGSTASH_CERT")
}

task copyWAR(type: Copy) {
    from '../mediator-app/build/libs/mediator-app-1.0.war'
    into 'servers/gameon-mediator/apps/'
    rename("mediator-app-1.0.war", "mediator-app.war")
}

apply plugin: 'com.bmuschko.docker-remote-api'

import com.bmuschko.gradle.docker.tasks.container.*
import com.bmuschko.gradle.docker.tasks.image.*

docker {
	url = dockerHost
    certPath = new File(System.getenv("DOCKER_CERT_PATH"))
}

task buildDockerImage(type: DockerBuildImage, dependsOn: ['copyWAR']) {
	inputDir = file('.')
    tag = 'gameon-mediator'
    quiet = false
}

task stopCurrentContainer(type: DockerStopContainer) {
    targetContainerId { "gameon-mediator" }
    timeout 0
}

task removeCurrentContainer(type: DockerRemoveContainer) {
	targetContainerId { "gameon-mediator" }
}

task createNewContainer(type: DockerCreateContainer) {
	targetImageId { "gameon-mediator" }
	containerName = "gameon-mediator"
	portBindings = ['9446:9446']
        env = determinedEnvironment
}

task startNewContainer(type: DockerStartContainer) {
	dependsOn createNewContainer
	targetContainerId { "gameon-mediator" }
}
